package com.zhihui.order.partner.plateno.service.book;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.4
 * 2016-02-16T14:55:54.368+08:00
 * Generated source version: 2.7.4
 * 
 */
@WebServiceClient(name = "Booking", 
                  wsdlLocation = "http://121.33.201.180:6005/Booking.asmx?wsdl",
                  targetNamespace = "http://www.7daysinn.cn/booking") 
public class Booking extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.7daysinn.cn/booking", "Booking");
    public final static QName BookingSoap12 = new QName("http://www.7daysinn.cn/booking", "BookingSoap12");
    public final static QName BookingSoap = new QName("http://www.7daysinn.cn/booking", "BookingSoap");
    static {
        URL url = null;
        try {
            url = new URL("http://121.33.201.180:6005/Booking.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Booking.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://121.33.201.180:6005/Booking.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Booking(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Booking(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Booking() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Booking(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Booking(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Booking(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns BookingSoap
     */
    @WebEndpoint(name = "BookingSoap12")
    public BookingSoap getBookingSoap12() {
        return super.getPort(BookingSoap12, BookingSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BookingSoap
     */
    @WebEndpoint(name = "BookingSoap12")
    public BookingSoap getBookingSoap12(WebServiceFeature... features) {
        return super.getPort(BookingSoap12, BookingSoap.class, features);
    }
    /**
     *
     * @return
     *     returns BookingSoap
     */
    @WebEndpoint(name = "BookingSoap")
    public BookingSoap getBookingSoap() {
        return super.getPort(BookingSoap, BookingSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BookingSoap
     */
    @WebEndpoint(name = "BookingSoap")
    public BookingSoap getBookingSoap(WebServiceFeature... features) {
        return super.getPort(BookingSoap, BookingSoap.class, features);
    }

}
